<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <!--
    DocFx is too dumb to avoid polluting source folders.
    This project cleans up this polution after the FocFx build.    
    We only need to do that once for all the target frameworks. So we arbitraty pick one,
    do it when the project is build for that Fx and skip for others.
    -->
    <BuildDocFx Condition="'$(TargetFramework)' == 'net6.0'">true</BuildDocFx>
    <BuildDocFx Condition="'$(TargetFramework)' != 'net6.0'">false</BuildDocFx>    
  </PropertyGroup>

  <ItemGroup>
    <!-- Chain the `DocFxGenerator-Xyz` projects: -->    
    <ProjectReference Include="$(MSBuildProjectDirectory)\DocFxGenerator-D-Net6.csproj" />
  </ItemGroup>

  <PropertyGroup>
    <!-- Prefix qualifier for diagnostic messages on build output console: -->
    <!-- Maintain constant width for layout! -->
    <!--
    Template: 
    <DocFxGeneratorPrefixSuffix>X&lt;1234567&gt;</DocFxGeneratorPrefixSuffix>
    -->
    <DocFxGeneratorPrefixSuffix>E&lt;Cleanup&gt;</DocFxGeneratorPrefixSuffix>
  </PropertyGroup>

  <ItemGroup>
    <!-- Clear auto-discovered project files from VS Solution Explorer view: -->
    <None Remove="@(None)" />

    <!-- Display Dir-wide settings file in VS Solution Explorer: -->
    <None Include="Directory.Build.props" />
  </ItemGroup>

  <Target Name="CleanObjDirs" Condition="'$(BuildDocFx)' == 'true'" AfterTargets="Build">

    <!--
    DocFx is too dumb to avoid polluting source folders.
    So we have to clean up after it. Since we are deleting folders in the source directories, let's play is safe
    and list them explicitly rather than trying to discover them.
    ! Remember to add here every project for which we generate API Docs, so that the respective `obj` folder can be cleaned up !
    -->

    <ItemGroup>
      <ObjDirs Include="$(SrcRoot)\SDK\Common\obj" />
      <ObjDirs Include="$(SrcRoot)\SDK\WorkflowClient\obj" />
      <ObjDirs Include="$(SrcRoot)\SDK\Api.Client.ManagedGrpc\obj" />
    </ItemGroup>

    <Message Text="[$(DocFxGeneratorPrefix) $(DocFxGeneratorPrefixSuffix)]    DocFx done. Cleaning Obj Directories." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix) $(DocFxGeneratorPrefixSuffix)]    Timestamp:              $([System.DateTime]::Now.ToString('HH:mm:ss.fffff'))." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix) $(DocFxGeneratorPrefixSuffix)]    Project file:           &quot;$(MSBuildProjectFullPath)&quot;." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix) $(DocFxGeneratorPrefixSuffix)]    TargetFramework:        &quot;$(TargetFramework)&quot;." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix) $(DocFxGeneratorPrefixSuffix)]    CleanObjDirs:           SrcRoot=&quot;$(SrcRoot)&quot;." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix) $(DocFxGeneratorPrefixSuffix)]    CleanObjDirs:           ObjDirs{@(ObjDirs->Count())}=&quot;@(ObjDirs)&quot;." Importance="high" />

    <RemoveDir Directories="@(ObjDirs)">
      <Output TaskParameter="RemovedDirectories"
              ItemName="RemovedObjDirs" />
    </RemoveDir>

    <Message Text="[$(DocFxGeneratorPrefix) $(DocFxGeneratorPrefixSuffix)]    CleanObjDirs:           RemovedObjDirs{@(RemovedObjDirs->Count())}=&quot;@(RemovedObjDirs)&quot;." Importance="high" />
    <Message Text=" " Importance="high" />

  </Target>

</Project>