<Project Sdk="Microsoft.NET.Sdk">

  <ItemGroup>
    <None Include="Directory.Build.props" />
  </ItemGroup>

  <PropertyGroup>
    <!--
    This project copies the files required for the DocFx execution to the build folder.
    We only need to do that once for all the target frameworks. So we arbitraty pick one,
    do it when the project is build for that Fx and skip for others.
    -->
    <BuildDocFx Condition="'$(TargetFramework)' == 'net6.0'">true</BuildDocFx>
    <BuildDocFx Condition="'$(TargetFramework)' != 'net6.0'">false</BuildDocFx>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Prefix qualifier for diagnostic messages on build output console: -->
    <!-- Maintain constant width for layout! -->
    <!--
    Template: 
    <DocFxGeneratorPrefixSuffix>X&lt;1234567&gt;</DocFxGeneratorPrefixSuffix>
    -->
    <DocFxGeneratorPrefixSuffix>A&lt;Prepare&gt;</DocFxGeneratorPrefixSuffix>
  </PropertyGroup>

  <ItemGroup>
    <!--
    We need to make sure that all project referenced in `docfx.json` are built before we start creating the docs.
    -->
    <ProjectReference Include="$(SdkSrcBaseDir)\Api.Client.ManagedGrpc\Temporal.Api.Client.ManagedGrpc.csproj" />  
    <ProjectReference Include="$(SdkSrcBaseDir)\Common\Temporal.Sdk.Common.csproj" />
    <ProjectReference Include="$(SdkSrcBaseDir)\WorkflowClient\Temporal.Sdk.WorkflowClient.csproj" />
  </ItemGroup>


  <ItemGroup>
    <!-- These files must be be copied into the DocFx Build Root folder before invoking DocFx: -->
    
    <InternalItemToDocFxBuildRoot Include="DocFx-Metadata.json" />
    <InternalItemToDocFxBuildRoot Include="DocFx-net462.json" />
    <InternalItemToDocFxBuildRoot Include="DocFx-netcoreapp3.1.json" />
    <InternalItemToDocFxBuildRoot Include="DocFx-net6.0.json" />
    <InternalItemToDocFxBuildRoot Include="GlobalMetadata.json" />
    <InternalItemToDocFxBuildRoot Include="FileMetadata.json" />
    <InternalItemToDocFxBuildRoot Include="Filter-AllTemporalGrpcApi.yml" />
    <InternalItemToDocFxBuildRoot Include="Filter-Gogoproto.yml" />
  
    <!-- Display these files as a group in VS Solution Explorer: -->
    <None Include="@(InternalItemToDocFxBuildRoot)" Link="DocFx-Config-Files\%(RecursiveDir)%(Filename)%(Extension)" Visible="true" />

  </ItemGroup>

  <ItemGroup>
    <!-- All filed in the `$(EnlistmentRoot)\Doc` folder must be copied into the DocFx working / binary folder before we build the docs: -->
    
    <ExternalItemToDocFxBuildRoot Include="$(DocFilesRoot)/**/*" />
    
    <!-- Display these files as a group in VS Solution Explorer: -->
    <None Include="@(ExternalItemToDocFxBuildRoot)" Link="_Repo\Doc\%(RecursiveDir)%(Filename)%(Extension)" Visible="true" />
  
  </ItemGroup>
      
  <Target Name="CopyFilesToDocFxBuild"
          Condition="'$(BuildDocFx)' == 'true'"
          AfterTargets="PrintDocFxGeneratorDetails_DOBuildDocFx;PrintDocFxGeneratorDetails_DONTBuildDocFx"
          BeforeTargets="Build">
    <!--
    This target copies the necessary files to the DocFx Build Root folder and subfolders before invoking DocFx.
    -->
    
    <!-- Clean the target directory: -->
    
    <PropertyGroup>
      <!--
      We want to delete / clean everything in $(DocFxBuildRoot), but if something went wrong and $(DocFxBuildRoot) is
      not populated correctly, we could delete too much. In the worst case, it points to the root directory and we delete
      the entire file system. To protect, we check whether it ends in what we excpect it to end.
      `$(DocFxBuildRoot)` should be `$(BuildOutputRoot)\DocFx`, where `$(BuildOutputRoot)` is a global path ending in `_build`.
      If the values of those properties are changed where they are defined, we will need to update this check here.
      This is better than to delete all files on a disk by mistake.
      -->
      <ExpectedDocFxBuildRootSuffix>_build\DocFx</ExpectedDocFxBuildRootSuffix>
      <SafeToCleanDocFxBuildRoot Condition="$(DocFxBuildRoot.EndsWith($(ExpectedDocFxBuildRootSuffix))) == true">true</SafeToCleanDocFxBuildRoot>
      <SafeToCleanDocFxBuildRoot Condition="$(DocFxBuildRoot.EndsWith($(ExpectedDocFxBuildRootSuffix))) == false">false</SafeToCleanDocFxBuildRoot>
    </PropertyGroup>
    
    <!--
    We could just apply RemoveDir to $(DocFxBuildRoot), but it may fail if we are doing local development and the folder is open by some app or console.
    So we delete all files in $(DocFxBuildRoot), then attempt to remove the dir, but if failing to remove it should be benign beyond cosmetic aspects.
    -->

    <ItemGroup Condition="'$(SafeToCleanDocFxBuildRoot)' == 'true'">
      <DocFxBuildFilesToClean Include="$(DocFxBuildRoot)\**\*.*" />
    </ItemGroup>
    
    <Message Text="[$(DocFxGeneratorPrefix) $(DocFxGeneratorPrefixSuffix)]    CopyFilesToDocFxBuild:  `DocFxBuildRoot`=&quot;$(DocFxBuildRoot)&quot;." Importance="high" />
             
    <Message Text="[$(DocFxGeneratorPrefix) $(DocFxGeneratorPrefixSuffix)]    CopyFilesToDocFxBuild:  Will delete @(DocFxBuildFilesToClean-&gt;Count()) files to clean `DocFxBuildRoot`." Importance="high" Condition="'$(SafeToCleanDocFxBuildRoot)' == 'true'" />
    
    <Message Text="[$(DocFxGeneratorPrefix) $(DocFxGeneratorPrefixSuffix)]    CopyFilesToDocFxBuild:  Will NOT clean `DocFxBuildRoot`, becasue it is not formed as expected." Importance="high" Condition="'$(SafeToCleanDocFxBuildRoot)' != 'true'" />
    
    <Delete Condition="'$(SafeToCleanDocFxBuildRoot)' == 'true'" Files="@(DocFxBuildFilesToClean)">
            <Output TaskParameter="DeletedFiles" ItemName="CleanedDocFxBuildFiles" />
    </Delete>
    
    <Message Text="[$(DocFxGeneratorPrefix) $(DocFxGeneratorPrefixSuffix)]    CopyFilesToDocFxBuild:  CleanedDocFxBuildFiles-&gt;Count()=&quot;@(CleanedDocFxBuildFiles-&gt;Count())&quot;." Importance="high" />
    
    <!-- Uncomment this line to see all deleted files. There might be a lot. -->
    <!--
    <Message Text="[$(DocFxGeneratorPrefix) $(DocFxGeneratorPrefixSuffix)]    CopyFilesToDocFxBuild:  CleanedDocFxBuildFiles=&quot;@(CleanedDocFxBuildFiles)&quot;." Importance="high" />
    -->
    
    <Message Text="[$(DocFxGeneratorPrefix) $(DocFxGeneratorPrefixSuffix)]    CopyFilesToDocFxBuild:  Will attempt to remove the dir `DocFxBuildRoot`. It may fail if the dir is open locally. That should be benign." Importance="high" 
             Condition="'$(SafeToCleanDocFxBuildRoot)' == 'true'" />
    
    <RemoveDir Directories="$(DocFxBuildRoot)"
               ContinueOnError="WarnAndContinue">
               <Output TaskParameter="RemovedDirectories"
                       ItemName="RemovedDocFxBuildRootDir" />
    </RemoveDir>
    
    <Message Text="[$(DocFxGeneratorPrefix) $(DocFxGeneratorPrefixSuffix)]    CopyFilesToDocFxBuild:  RemovedDocFxBuildRootDirs{@(RemovedDocFxBuildRootDirs-&gt;Count())}=&quot;@(RemovedDocFxBuildRootDirs)&quot;." Importance="high" />
        
    <Message Text=" " Importance="high" />
    
    <!-- Target directory cleaned. Now copy files. -->
    
    <Message Text="[$(DocFxGeneratorPrefix) $(DocFxGeneratorPrefixSuffix)]    CopyFilesToDocFxBuild:  Will now copy InternalItemToDocFxBuildRoot{@(InternalItemToDocFxBuildRoot-&gt;Count())} files to `DocFxBuildRoot`." Importance="high" />

    <Copy SourceFiles="@(InternalItemToDocFxBuildRoot)" DestinationFiles="$(DocFxBuildRoot)\%(RecursiveDir)%(Filename)%(Extension)" SkipUnchangedFiles="false" Retries="4" RetryDelayMilliseconds="500">      
          <Output TaskParameter="CopiedFiles" ItemName="InternalsCopied" />
    </Copy>
    
        <Message Text="[$(DocFxGeneratorPrefix) $(DocFxGeneratorPrefixSuffix)]    CopyFilesToDocFxBuild:  Will now copy ExternalItemToDocFxBuildRoot{@(ExternalItemToDocFxBuildRoot-&gt;Count())} files to `DocFxBuildRoot`." Importance="high" />

    <Copy SourceFiles="@(ExternalItemToDocFxBuildRoot)" DestinationFiles="$(DocFxBuildRoot)\%(RecursiveDir)%(Filename)%(Extension)" SkipUnchangedFiles="false" Retries="4" RetryDelayMilliseconds="500">
          <Output TaskParameter="CopiedFiles" ItemName="ExternalsCopied" />
    </Copy>
    
    <Message Text="[$(DocFxGeneratorPrefix) $(DocFxGeneratorPrefixSuffix)]    CopyFilesToDocFxBuild:  InternalsCopied{@(InternalsCopied-&gt;Count())}=&quot;@(InternalsCopied)&quot;." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix) $(DocFxGeneratorPrefixSuffix)]    CopyFilesToDocFxBuild:  ExternalsCopied{@(ExternalsCopied-&gt;Count())}=&quot;@(ExternalsCopied)&quot;." Importance="high" />
    <Message Text=" " Importance="high" />
  </Target>
  
</Project>